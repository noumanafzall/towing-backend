generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  DRIVER
  CUSTOMER
  ADMIN
  MODERATOR
}

enum RegistrationStatus {
  PENDING
  ACTIVE
  INACTIVE
}

enum RideStatus {
  PENDING
  ACCEPTED
  SCHEDULED
  ONGOING
  COMPLETED
  CANCELLED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  RIDE_PAYMENT
  RIDE_EARNING
  REFUND
  ADJUSTMENT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum PaymentMethod {
  WALLET
  CARD
  BANK
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum RefundStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id               Int               @id @default(autoincrement())
  email            String            @unique
  password         String
  role             String
  fullName         String
  phoneNumber      String?
  profilePic       String?
  country          String?           // ISO alpha-2
  region           String?           // State/Province/Region
  city             String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  driverProfile    DriverProfile?
  customerProfile  CustomerProfile?
  ridesAsDriver    Ride[]            @relation("DriverRides")
  ridesAsCustomer  Ride[]            @relation("CustomerRides")
  wallet           Wallet?
  transactions     Transaction[]
  bankAccount      BankAccount?
  invoices         Invoice[]
  refundLogs       RefundLog[]       @relation("RefundedByDriver")
  receivedRefunds  RefundLog[]       @relation("RefundedToCustomer")
  refundRequests   RefundRequest[]
  reviewedRefunds  RefundRequest[]   @relation("ReviewedByAdmin")
  driverEarnings   DriverEarning[]   // Add relation to DriverEarning
  rideRequests     RideRequest[]     // Add this line
}

model DriverProfile {
  id                 Int                @id @default(autoincrement())
  userId             Int                @unique
  user               User               @relation(fields: [userId], references: [id])
  licenseUrl         String?
  insuranceUrl       String?
  vehiclePhotos      String[]
  truckType          String?
  truckCapacity      String?
  truckPhotos        String[]
  languages          String[]
  termsAccepted      Boolean            @default(false)
  ratings            Float?             @default(0.0)
  billingType        String?            @default("N/A")
  registrationStatus RegistrationStatus @default(PENDING)
  totalEarnings      Float?             @default(0.0)
  experience         Int?               @default(0)
  bankName           String?
  iban               String?
  swiftCode          String?
  taxProfile         DriverTaxProfile?
}

model DriverTaxProfile {
  id              Int           @id @default(autoincrement())
  driverId        Int           @unique
  driverProfile   DriverProfile @relation(fields: [driverId], references: [id])
  taxId           String?
  taxDocumentUrl  String?
  taxRate         Float?
  taxCountry      String?
  taxRegion       String?
  legalName       String?
  ssnOrEin        String?
  mailingAddress  String?
  consent1099     Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model CustomerProfile {
  id               Int      @id @default(autoincrement())
  userId           Int      @unique
  user             User     @relation(fields: [userId], references: [id])
  defaultAddress   String?
  termsAccepted    Boolean  @default(false)
  totalOrders      Int      @default(0)
  totalAmountSpent Float    @default(0.0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model LocationUpdate {
  id                   Int      @id @default(autoincrement())
  rideId              Int
  ride                Ride     @relation("RideLocations", fields: [rideId], references: [id])
  latitude            Float
  longitude           Float
  timestamp           DateTime  @default(now())
  speed               Float?
  heading             Float?
  accuracy            Float?
  isLastKnown         Boolean   @default(false)
  lastLocationForRide Ride?    @relation("LastLocation")
  lastLocationForRideId Int?    @unique
}

model RideRequest {
  id              Int               @id @default(autoincrement())
  customerId      Int
  customer        User              @relation(fields: [customerId], references: [id])
  pickupLocation  String
  dropoffLocation String
  pickupDateTime  DateTime
  status          String            @default("PENDING") // RideRequestStatus
  vehicles        VehicleRequest[]
  estimatedDistance Float?
  basePrice       Float?
  totalPrice      Float?
  notes           String?
  expiresAt       DateTime
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ride            Ride?             // The actual ride if request is accepted
}

model VehicleRequest {
  id              Int         @id @default(autoincrement())
  rideRequestId   Int
  rideRequest     RideRequest @relation(fields: [rideRequestId], references: [id])
  plateNumber     String
  vehicleType     String
  vehicleModel    String
  vehicleColor    String
  description     String?
}

model Ride {
  id                Int             @id @default(autoincrement())
  driverId          Int?            // Make driverId optional for scheduled rides
  driver            User?           @relation("DriverRides", fields: [driverId], references: [id])
  customerId        Int
  customer          User            @relation("CustomerRides", fields: [customerId], references: [id])
  rideRequest       RideRequest?    @relation(fields: [rideRequestId], references: [id])
  rideRequestId     Int?            @unique
  pickupLocation    String
  dropoffLocation   String
  pickupDateTime    DateTime
  dropoffDateTime   DateTime?
  expectedDropoff   DateTime?
  actualDropoff     DateTime?
  estimatedDistance Float?
  actualDistance    Float?
  basePrice         Float?
  extraMiles        Float?
  totalPrice        Float?
  driverShare       Float?          // Driver's share of the total price
  platformFee       Float?          // Platform's fee
  status            String          @default("PENDING") // RideStatus
  notes             String?
  cancellationReason String?
  isScheduled       Boolean         @default(false)
  scheduledDate     DateTime?       // The date the ride is scheduled for
  driverAcceptedAt  DateTime?       // When the driver accepted the ride
  vehicles          RideVehicle[]
  driverEarning     DriverEarning?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  refundRequests    RefundRequest[]
  refundLogs        RefundLog[]
  locationUpdates   LocationUpdate[] @relation("RideLocations")
  lastLocation      LocationUpdate? @relation("LastLocation", fields: [lastLocationId], references: [id])
  lastLocationId    Int?            @unique
}

// New model for vehicles in a ride
model RideVehicle {
  id              Int      @id @default(autoincrement())
  rideId          Int
  ride            Ride     @relation(fields: [rideId], references: [id])
  plateNumber     String
  vehicleType     String
  vehicleModel    String
  vehicleColor    String
  description     String?  // Optional description field
  beforeRidePhotos String[]
  afterRidePhotos  String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([rideId])
}

model Wallet {
  id          Int           @id @default(autoincrement())
  userId      Int           @unique
  user        User          @relation(fields: [userId], references: [id])
  balance     Float         @default(0.0)
  currency    String        @default("USD")
  transactions Transaction[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Transaction {
  id            Int               @id @default(autoincrement())
  walletId      Int
  wallet        Wallet           @relation(fields: [walletId], references: [id])
  userId        Int
  user          User             @relation(fields: [userId], references: [id])
  amount        Float
  type          TransactionType
  status        TransactionStatus @default(PENDING)
  method        PaymentMethod
  description   String?
  reference     String?
  bankName      String?
  accountNumber String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model BankAccount {
  id            Int      @id @default(autoincrement())
  userId        Int      @unique
  user          User     @relation(fields: [userId], references: [id])
  bankName      String
  accountNumber String
  routingNumber String?
  iban          String?
  swiftCode     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Invoice {
  id          Int           @id @default(autoincrement())
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  amount      Float
  status      InvoiceStatus @default(PENDING)
  dueDate     DateTime
  paidDate    DateTime?
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model RefundRequest {
  id             Int          @id @default(autoincrement())
  rideId         Int
  ride           Ride         @relation(fields: [rideId], references: [id])
  customerId     Int
  customer       User         @relation(fields: [customerId], references: [id])
  reason         String
  evidencePhotos String[]
  status         RefundStatus @default(PENDING)
  reviewedById   Int?
  reviewedBy     User?        @relation("ReviewedByAdmin", fields: [reviewedById], references: [id])
  reviewNotes    String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model RefundLog {
  id           Int      @id @default(autoincrement())
  rideId       Int
  ride         Ride     @relation(fields: [rideId], references: [id])
  driverId     Int
  driver       User     @relation("RefundedByDriver", fields: [driverId], references: [id])
  customerId   Int
  customer     User     @relation("RefundedToCustomer", fields: [customerId], references: [id])
  amount       Float
  reason       String
  createdAt    DateTime @default(now())
}

model PricingSetting {
  id           Int      @id @default(autoincrement())
  basePrice    Float    @default(50.00)
  baseMiles    Float    @default(5.0)
  pricePerMile Float    @default(2.50)
  createdAt    DateTime @default(now())
}

// New model to track driver earnings per ride
model DriverEarning {
  id              Int      @id @default(autoincrement())
  rideId          Int      @unique
  ride            Ride     @relation(fields: [rideId], references: [id])
  driverId        Int
  driver          User     @relation(fields: [driverId], references: [id])
  amount          Float    // Amount earned from this ride
  platformFee     Float    // Platform fee for this ride
  taxAmount       Float?   // Tax amount if applicable
  netAmount       Float    // Net amount after platform fee and taxes
  isPaid          Boolean  @default(false)
  paidAt          DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([driverId])
}
